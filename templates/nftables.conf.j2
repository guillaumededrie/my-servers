#!/usr/bin/env nft -f
# {{ ansible_managed }}
# NOTE: Problem identified with `iptables-nft` package version after 1.8.8-3-x86_64:
# As the `filter->DOCKER_USER` chain seems to be created before being used by
# Docker, Docker endup using another chain that create problemsâ€¦
# The version is locked in `/etc/pacman.conf`

# Clean
flush ruleset

table inet my_filter {
    chain input {
        type filter hook input priority 0; policy drop;

        ct state invalid counter drop comment "Early drop invalid connections"
        ct state {established, related} counter accept comment "Accept traffic originated from us"

        iif lo accept comment "Accept any localhost traffic"
        iif != lo ip daddr 127.0.0.1/8 counter drop comment "drop connections to loopback not coming from loopback"

        # Allow Prometheus container from the monitoring to access nodeexporter metrics
        ct state { new } ip saddr 172.42.0.10 tcp dport 9100 accept

        ip protocol icmp accept comment "accept all ICMP types"
        meta l4proto ipv6-icmp accept

        tcp dport 22 ct state new limit rate 15/minute counter accept comment "Accept SSH on port 22"

        counter comment "count dropped packets"
    }

    chain forward {
        # This chain should be executed after the `FORWARD` Docker chain.
        type filter hook forward priority security; policy drop;

        # See: https://unix.stackexchange.com/questions/657545/nftables-whitelisting-docker
        # Packet originated from docker bridges
        meta mark 0x10ca1 counter accept
        # Other packets not filtered by the previous rules
        meta mark 0xd0cca5e counter jump external_access_to_docker_bridges

        counter comment "count dropped packets"
    }

    chain external_access_to_docker_bridges {
        ct state invalid counter drop comment "Early drop invalid connections"
        ct state {established, related} counter accept
        iif {{ apps_public_interface_authorized }} ip saddr { {{ apps_authorized_ips|join(', ') }} } counter accept
        iif {{ apps_public_interface_authorized }} tcp dport { 80, {{ apps_publicly_exposed_ports|join(', ') }} } counter accept
    }

    chain output {
        type filter hook output priority 0; policy accept;
        # Accept every outbound connection
        counter comment "count accepted packets"
    }
}

table ip filter {
    chain DOCKER-USER {
        # Mark all Docker packets to be used in the `my_filter->forward` chain.
        meta mark set 0xd0cca5e counter

        # Update packet mark for those coming from a Docker bridge
        iifname {"docker0", "br-*"} meta mark set 0x10ca1 counter
    }
}
